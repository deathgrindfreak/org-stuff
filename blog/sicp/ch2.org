#+STARTUP: indent

---
layout: post
title: SICP Chapter 2 Solutions
date:  2015-01-24 23:55:32
categories: sicp
---

These are my notes for Chapter 2 of the Structure and Interpretation
of Computer Programs. Since I started using org mode quite a bit after
I began SICP, I'll have to come back and transcribe the previous
sections at a later time.

* 2 Building Abstractions With Data
** 2.1  Introduction to Data Abstraction
*** 2.1.1  Example: Arithmetic Operations for Rational Numbers
*** 2.1.2  Abstraction Barriers
*** 2.1.3  What Is Meant by Data?
*** 2.1.4  Extended Exercise: Interval Arithmetic
** 2.2  Hierarchical Data and the Closure Property
*** 2.2.1  Representing Sequences
*** 2.2.2  Hierarchical Structures
*** 2.2.3 Sequences as Conventional Interfaces
One of the most important concepts in this section is the concept of
the "signal chain" as illustrated in fig. 2.7.  Of course this is
really a visualization of how programs are more conceptually tractable
when they are modularized appropriately (a concept that is hammered on
in the famous [[http://worrydream.com/refs/Hughes-WhyFunctionalProgrammingMatters.pdf]["Why Functional Programming Matters"]] paper).

**** Sequence Operations
As the title suggests, this sub-section takes on the task of breaking
down programs into sub-tasks using the signal chain metaphor.

***** Exercise 2.33
The best explanation for how to define functions in terms of folds (or
just writing folds in the first place) actually came from the
previously mentioned paper.  All a fold (right fold) does on a list is
replace every 'cons' in the list with the function that is being
folded with and the final 'nil' with the initial element.  For
example, 'fold + 0 '(1 2 3) transforms the list like so:

#+BEGIN_SRC scheme
(cons 1 (cons 2 (cons 3 '()))) -> (+ 1 (+ 2 (+ 3 0)))
#+END_SRC

In the first expression, we merely want to replace every
'cons x' with a 'cons (p x)'. Show the resulting expression
is:

#+BEGIN_SRC scheme
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y) nil sequence))
#+END_SRC

In the second expression, we want the cons to remain unchanged.
However, in order to append the lists, the final '() in seq1 must be
replaced by the entire seq2.  Thus the expression becomes:

#+BEGIN_SRC scheme
(define (append seq1 seq2)
  (accumulate cons seq1 seq1))
#+END_SRC

Finally, for the last expression, each cons must be replaced with '+',
each non-nil element with 1 and the final 'nil' with 0.

#+BEGIN_SRC scheme
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
#+END_SRC

***** Exercise 2.34
Just as was done in the previous exercise, we need to replace the
conses in the list in order to perform the fold.  The following should
do the trick:

#+BEGIN_SRC scheme
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff
                   (* x
                      higher-terms)))
              0
              coefficient-sequence))
#+END_SRC

***** Exercise 2.35
Using the 'replace cons' metaphor, if we replace all conses that are
themselves pairs with a recursive call to count-leaves, and all
non-pairs with '1', it will successfully calculate the number of
leaves in any tree:

#+BEGIN_SRC scheme
(define (count-leaves t)
  (accumulate + 
              0
              (map (lambda (x)
                     (if (pair? x)
                         (count-leaves x)
                         1))
                   t)))
#+END_SRC

***** Exercise 2.36
I had to stare at an open buffer for a few minutes until the
solution for this one hit me.  Since we're accumulating only the first
element of every subsequence at a time, we just have to map the car
function on the sequence of sequences, pass that to the normal
accumulate function, the pass the result of mapping the cdr to the
sequence of sequences to the accumulate-n function (consing these two
in the process).  Add, rinse, repeat.

#+BEGIN_SRC scheme
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))
#+END_SRC

***** Exercise 2.37
These aren't too bad if you're familiar with some standard matrix
operations.

In order to define the matrix-vector product, we need to map the
vector to every row of the matrix and perform a dot product.

#+BEGIN_SRC scheme
(define (matrix-*-vector m v)
  (map (lambda (w) (dot-product v w)) m))
#+END_SRC

For the next operation, we need to cons each element in each row of
the matrix, with elements in other rows in the same column.

#+BEGIN_SRC scheme
(define (transpose mat)
  (accumulate-n cons nil mat))
#+END_SRC

For the final expression, in order to perform the matrix-matrix
product, we simply need to transform the matrix to the right, then map
each row in the left, to a dot product with each row in the now
transposed matrix to the right.

#+BEGIN_SRC scheme
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row-m)
           (map (lambda (row-n)
                  (dot-product row-m row-n))
                cols))
         m)))
#+END_SRC

***** Exercise 2.38
The values for the expressions are:

#+BEGIN_SRC scheme
(fold-right / 1 (list 1 2 3)) => (/ 1 (/ 2 (/ 3 1))) => 3/2
(fold-left / 1 (list 1 2 3)) => (/ (/ (/ 1 1) 2) 3) => 3/2
(fold-right list nil (list 1 2 3)) => (list 1 (list 2 (list 3 nil)))
(fold-left list nil (list 1 2 3)) => (list (list (list 1 nil) 2) 3)
#+END_SRC

From the expressions above, we see that the types of expressions that
are invariant over folds tend to be those that are commutative. The
above example for is actually a bit of a misnomer since 

#+BEGIN_SRC scheme
(fold-left / 2 '(1 2 3 4) => 1/12 != 3/4 <= (fold-right / 2 '(1 2 3 4))
#+END_SRC

However, using + we can see that:

#+BEGIN_SRC scheme
(fold-left + 1 '(1 2 3 4)) => (+ (+ (+ (+ 1 1) 2) 3) 4) = (+ 4 (+ 3 (+ 2 (+ 1 1)))) <= (fold-right + 1 '(1 2 3 4))
#+END_SRC

This is of course due to the fact that (+ a b) == (+ b a). thus for
all all op such that (op a b) == (op b a), foldr will produce the same
result as foldl.

***** Exercise 2.39
It immediately comes to mind that we should use some sort of list
operation (no duh) like cons or list, since we're not reducing, but
merely manipulating the form of the list.  I generally find right
folds to be a bit easier to grasp conceptually, since they generally
don't change the structure of the list, so we'll start there.

In order to reverse the entire list, at each step in the fold we can
simply reverse the order of the parameters to the lambda function and
cons them.

#+BEGIN_SRC scheme
(define (reverse sequence)
  (fold-right (lambda (x y) (cons y x)) nil sequence))
#+END_SRC 

We can do a similar thing with the left fold, but since at each step
the fold is taking the previous result and placing it in the right
argument of op with the next element of the list into the left
argument, if we instead use list with the arguments reversed, we gain
the desired procedure (that's one hell of a run-on sentence).

#+BEGIN_SRC scheme
(define (reverse sequence)
  (fold-left (lambda (x y) (list y x)) nil sequence))
#+END_SRC 

**** Nested Mappings
This section covers more on sequence operations, mainly on the subject
of nested mappings and their applications.

***** Exercise 2.40
I'm not completely sure why they stuck this one in here, mainly since
they did the work for us at the very beginning of the sub-section
(perhaps to further illustrate the power of modular programs).

#+BEGIN_SRC scheme
(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j)
                    (list i j))
                  (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n)))
#+END_SRC

And prime-pairs becomes:

#+BEGIN_SRC scheme
(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum? (unique-pairs n))))
#+END_SRC

***** Exercise 2.41
You can guess the structure of this one pretty easily, though it
unintuitively (at least for me at first) requires two flatmaps, with
the last one being the only normal map.

#+BEGIN_SRC scheme
(define (unique-triples n)
  (flatmap (lambda (i)
             (flatmap (lambda (j)
                        (map (lambda (k)
                               (list i j k))
                             (enumerate-interval 1 (- j 1))))
                      (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n)))
#+END_SRC

***** Exercise 2.42
I'm actually pretty stoked about this problem, even though took me an
embarrassing amount of time to complete. But I completed it without
help nonetheless. My solution is something, I think, that the authors
didn't intend (since both my versions of the functions adjoin-position
and safe? don't actually require the input k, but I included it anyway
in order to stick with the interface presented in the book). Anyway,
onto the solution.

I tested a few of the initial solutions by visual inspection alone.
But upon visiting the [[http://en.wikipedia.org/wiki/Eight_queens_puzzle][wiki page]] on the subject, I discovered that
there are only 92 solutions out of the total possible 4,426,165,368
(the total number of ways to arrange 8 queens on the board). And lo
and behold, my version yields 92 solutions! This is of course not a
rigorous proof by any measure of the word, but good enough for me.

I think the canonical way to do this (judging by the k variable in the
functions) was to generate and keep in memory many kxk boards full of
whatever null representation the programmer chose to user, and by
inserting values into the proper rows, the solution is generated.
However, the way that came to my mind was to simply cons new rows onto
the boards as they came up. That way, things become a bit simpler
since there's now no need to deal with any unnecessary null rows in
the board.

For the empty board representation, we simply need a list of the null
list.  Thus the following definition works nicely:

#+BEGIN_SRC scheme
(define empty-board nil)
#+END_SRC

Next, the safe? method needs to check all of the columns and diagonals
in the previous rows for any intersections (the way the rows are
generated guarantees that there will be no conflict there).

#+BEGIN_SRC scheme
(define (safe? k positions)
  (define (ones-position row)
    (if (= 1 (car row))
        0
        (+ 1 (ones-position (cdr row)))))
  
  (define (check-column check rest)
    (let ((check-position (ones-position check)))
      (null? (filter (lambda (row)
                       (= (ones-position row)
                          check-position))
                     rest))))

  (define (check-diagonal check rest)
    (let ((check-position (ones-position check)))
      (define (diag-helper rest count)
        (if (null? rest)
            #t
            (let ((current-row (car rest)))
              (if (or (= check-position
                         (+ (ones-position current-row) count))
                      (= check-position
                         (- (ones-position current-row) count)))
                  #f
                  (diag-helper (cdr rest) (+ count 1))))))
      (diag-helper rest 1)))
  
  (let ((check-row (car positions))
        (rest (cdr positions)))
    (and (check-column check-row rest)
         (check-diagonal check-row rest))))
#+END_SRC

I know of a few ways implement this using built-in functions, but I
thought I'd try to stick with only those functions that have been
introduced in the book thus far.

Finally, I had to implement the adjoin-positions function as a
closure, since it needs the board-size definition from the queens
function. All adjoin-positions needs to really do is cons new rows
with every possible queen position onto the existing partially-formed
boards.

#+BEGIN_SRC scheme
(define (queens board-size)
  
  (define (adjoin-position new-row k rest-of-queens)
    (define (make-row-with-k n k)
      (cond ((<= n 0) '())
            ((= (- n 1)
                (- n k)) (cons 1
                               (make-row-with-k (- n 1)
                                                (- k 1))))
            (else (cons 0 
                        (make-row-with-k (- n 1)
                                         (- k 1))))))
    (cons (make-row-with-k board-size new-row)
          rest-of-queens))
  
  (define (queen-cols k)  
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
#+END_SRC

I'm sure that there are much shorter ways to solve this problem, but
I'm pretty happy with the way it performs (it can generate the 10x10
solution in a second or so), so I'll stand behind it. 

***** Exercise 2.43
****** TODO 

*** 2.2.4 Example: A Picture Language
**** The picture language
This is how abstraction works at its best.  The simply fact that the
only object we have to deal with is the 'painter' shows how powerful
of a concept it can be.

***** Exercise 2.44
The up-split is almost identical in form to the right split, with the
interchange of the beside and below functions. 

#+BEGIN_SRC scheme
(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split (- n 1))))
        (below painter (beside smaller smaller)))))
#+END_SRC
     
**** Higher-order operations
This section extends the previous section by introducing a couple of
higher-order functions (one of them written by us in the next
exercise) that abstract most of our previously written functions.
    
***** Exercise 2.45
As was done with square-of-four, we need to create a function that
returns a function.  However unlike square-of-four, the function that
we return needs to take in two inputs: painter and n.
     
#+BEGIN_SRC scheme
(define (split left-op right-op)
  (lambda (painter n)
    (if (= n 0)
        painter
        (let ((smaller (split (- n 1))))
          (left-op painter (right-op smaller smaller))))))
#+END_SRC     
     
**** Frames
***** Exercise 2.46
The most natural way to represent a vector is a simple list.  Thus our
constructor becomes:

#+BEGIN_SRC scheme
(define (make-vect vx vy)
  (list vx vy))
#+END_SRC

To get the x coordinate, simply get the car of the list:

#+BEGIN_SRC scheme
(define (xcor-vect v)
  (car v))
#+END_SRC

To get the y coordinate, simply get the cadr of the list:

#+BEGIN_SRC scheme
(define (ycor-vect v)
  (cadr v))
#+END_SRC

Using similar list operations, as well as our previously defined
definitions, we can construct the add-vect, sub-vect and scale-vect
operations:

#+BEGIN_SRC scheme
(define (add-vect v1 v2)
  (list (+ (xcor-vect v1)
           (xcor-vect v2))
        (+ (ycor-vect v1)
           (ycor-vect v2))))

(define (sub-vect v1 v2)
  (list (- (xcor-vect v1)
           (xcor-vect v2))
        (- (ycor-vect v1)
           (ycor-vect v2))))

(define (scale-vect s v)
  (list (* s (xcor-vect v))
        (* s (ycor-vect v))))
#+END_SRC

***** Exercise 2.47
For the first constructor, the selectors are:

#+BEGIN_SRC scheme
(define (edge1-frame frame)
  (car frame))

(define (edge2-frame frame)
  (cadr frame))

(define (origin-frame frame)
  (caddr frame))
#+END_SRC

For the second:

#+BEGIN_SRC scheme
(define (edge1-frame frame)
  (car frame))

(define (edge2-frame frame)
  (cadr frame))

(define (origin-frame frame)
  (cddr frame))
#+END_SRC
**** Painters
***** Exercise 2.48
The most natural way to represent a segment is a list of two vectors.

#+BEGIN_SRC scheme
(define (make-segment sv ev)
  (list sv ev))
#+END_SRC

The selectors then become:

#+BEGIN_SRC scheme
(define (start-segment segment)
  (car segment))

(define (end-segment segment)
  (cadr segment))
#+END_SRC

***** Exercise 2.49

Although the book doesn't provide a way to actually draw the painters,
we can use racket's drawing toolkit to do so.  

First, define how big the picture will be.  I simply chose 300x300
since it seemed like a good size.  Then define a bitmap-dc, and our
implementation for drawing lines.

#+BEGIN_SRC scheme
(define *width* 300)
(define *height* 300)
(define *target* (make-bitmap *width* *height*))
(define *dc* (new bitmap-dc% [bitmap *target*]))

(send *dc* draw-rectangle 0 0 *width* *height*)
(send *dc* set-pen "black" 2 'solid)
#+END_SRC

The last two lines set our background color and pen size respectively.
We can also save the images by calling the save-file method.

#+BEGIN_SRC scheme
(send *target* save-file "image.png" 'png)
#+END_SRC

Finally, the function for drawing the actual lines is:

#+BEGIN_SRC scheme
(define (draw-line start end)
  (send *dc* draw-line
        (* *width* (xcor-vect start))
        (* *height* (ycor-vect start))
        (* *width* (xcor-vect end))
        (* *height* (ycor-vect end))))
#+END_SRC


a. In order to outline the frame we need four vectors, one pointing
to each corner of the parallelogram that outlines the frame (I've also
tweaked the frame in order to let it appear on screen).

#+BEGIN_SRC scheme
(define (paint-outline frame)
  (let ((origin (make-vect 0.0 0.0))
        (edge1 (make-vect 1.0 0.0))
        (edge2 (make-vect 0.0 1.0))
        (opposite-origin (make-vect 1.0 1.0)))
    ((segments->painter (list (make-segment origin edge1)
                              (make-segment origin edge2)
                              (make-segment edge1 opposite-origin)
                              (make-segment edge2 opposite-origin)))
     frame)))
#+END_SRC

#+CAPTION: paint-outline
#+NAME: paint-outline
[[images/paint-outline.png]]

b. Here we only need to connect the vectors constructed in the let* of
the previous exercise in a slightly different manner.

#+BEGIN_SRC scheme
(define (paint-x frame)
  (let ((origin (make-vect 0.0 0.0))
        (edge1 (make-vect 1.0 0.0))
        (edge2 (make-vect 0.0 1.0))
        (opposite-origin (make-vect 1.0 1.0)))
    ((segments->painter (list (make-segment origin opposite-origin)
                              (make-segment edge1 edge2)))
     frame)))
#+END_SRC

#+CAPTION: paint-x
#+NAME: paint-x
[[images/paint-x.png]]

c. To find the midpoint vector of two vectors we merely apply the transformation:

#+BEGIN_SRC scheme
(define (paint-diamond frame)
  (let ((origin-edge1 (make-vect 0.0 0.5))
        (origin-edge2 (make-vect 0.5 0.0))
        (edge1-opp (make-vect 0.5 1.0))
        (edge2-opp (make-vect 1.0 0.5)))
    ((segments->painter (list (make-segment origin-edge1 origin-edge2)
                              (make-segment origin-edge1 edge1-opp)
                              (make-segment origin-edge2 edge2-opp)
                              (make-segment edge1-opp edge2-opp)))
     frame)))
#+END_SRC

#+CAPTION: paint-diamond
#+NAME: paint-diamond
[[images/paint-diamond.png]]

d. Unlike the others, the wave painter that I developed is far more
ad-hock.  Also, since the y coordinate is measured differently in
racket draw than in SICP, I made a helper function that transforms the
y coordinates so that I can still be canonical with my solution.

#+BEGIN_SRC scheme
(define (transform-ys lst)
  (map (lambda (seg)
         (let ((st (start-segment seg))
               (ed (end-segment seg)))
           (make-segment (make-vect (xcor-vect st)
                                    (- 1 (ycor-vect st)))
                         (make-vect (xcor-vect ed)
                                    (- 1 (ycor-vect ed))))))
       lst))
#+END_SRC

#+BEGIN_SRC scheme
(define (paint-wave frame)
  ((segments->painter
    (transform-ys (list
                        
                   ;; Head
                   (make-segment (make-vect 0.38 0.87)
                                 (make-vect 0.41 1.00))
                   (make-segment (make-vect 0.38 0.87)
                                 (make-vect 0.41 0.76))
                   (make-segment (make-vect 0.61 0.87)
                                 (make-vect 0.58 1.00))
                   (make-segment (make-vect 0.61 0.87)
                                 (make-vect 0.58 0.76))
                   
                   ;; Shoulders
                   (make-segment (make-vect 0.41 0.76)
                                 (make-vect 0.34 0.76))
                   (make-segment (make-vect 0.58 0.76)
                                 (make-vect 0.72 0.76))

                   ;; Arms
                   (make-segment (make-vect 0.72 0.76)
                                 (make-vect 1.00 0.48))
                   (make-segment (make-vect 0.58 0.58)
                                 (make-vect 1.00 0.33))
                   (make-segment (make-vect 0.36 0.60)
                                 (make-vect 0.34 0.68))
                   (make-segment (make-vect 0.34 0.68)
                                 (make-vect 0.16 0.50))
                   (make-segment (make-vect 0.16 0.50)
                                 (make-vect 0.00 0.72))
                   (make-segment (make-vect 0.16 0.68)
                                 (make-vect 0.00 0.88))
                   (make-segment (make-vect 0.16 0.68)
                                 (make-vect 0.34 0.76))

                   ;; Legs
                   (make-segment (make-vect 0.58 0.58)
                                 (make-vect 0.75 0.00))
                   (make-segment (make-vect 0.50 0.42)
                                 (make-vect 0.60 0.00))
                   (make-segment (make-vect 0.50 0.42)
                                 (make-vect 0.40 0.00))
                   (make-segment (make-vect 0.36 0.60)
                                 (make-vect 0.25 0.00)))))
   frame))
#+END_SRC

#+CAPTION: paint-wave
#+NAME: paint-wave
[[images/paint-wave.png]]

**** Transforming and combining painters
***** Exercise 2.50
****** TODO Need to add vector diagrams for this one

#+BEGIN_SRC scheme
(define (flip-horiz painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 0.0 0.0)
                     (make-vect 1.0 1.0)))
#+END_SRC

#+CAPTION: flip-horiz
#+NAME: flip-horiz 
[[images/paint-flip-horiz.png]]

#+BEGIN_SRC scheme
(define (rotate-180 painter)
  (transform-painter painter
                     (make-vect 1.0 1.0)
                     (make-vect 0.0 1.0)
                     (make-vect 1.0 0.0)))
#+END_SRC

#+CAPTION: rotate-180
#+NAME: rotate-180
[[images/paint-rotate-180.png]]

#+BEGIN_SRC scheme
(define (rotate-270 painter)
  (transform-painter painter
                     (make-vect 0.0 1.0)
                     (make-vect 0.0 0.0)
                     (make-vect 1.0 1.0)))
#+END_SRC

#+CAPTION: rotate-270
#+NAME: rotate-270
[[images/paint-rotate-270.png]]

***** Exercise 2.51
#+BEGIN_SRC scheme
(define (below painter1 painter2)
  (let ((split-point (make-vect 0.0 0.5)))
    (let ((painter-below (transform-painter painter1
                                            (make-vect 0.0 0.0)
                                            (make-vect 1.0 0.0)
                                            split-point))
          (painter-above (transform-painter painter2
                                            split-point
                                            (make-vect 1.0 0.5)
                                            (make-vect 0.0 1.0))))
      (lambda (frame)
        (painter-below frame)
        (painter-above frame)))))
#+END_SRC

#+BEGIN_SRC scheme
(define (below painter1 painter2)
  (rotate-270 (beside painter1 painter2)))
#+END_SRC

#+CAPTION: below
#+NAME: below
[[images/paint-below.png]]

**** Levels of language for robust design
***** Exercise 2.52

a. A pretty rudimentary smile, but a smile nonetheless.

#+BEGIN_SRC scheme
(define (paint-wave frame)
  ((segments->painter
    (transform-ys (list
                        
                   ;; Head
                   (make-segment (make-vect 0.38 0.87)
                                 (make-vect 0.41 1.00))
                   (make-segment (make-vect 0.38 0.87)
                                 (make-vect 0.41 0.76))
                   (make-segment (make-vect 0.61 0.87)
                                 (make-vect 0.58 1.00))
                   (make-segment (make-vect 0.61 0.87)
                                 (make-vect 0.58 0.76))

                   ;; Smile
                   (make-segment (make-vect 0.43 .87)
                                 (make-vect 0.49 .85))
                   (make-segment (make-vect 0.55 .87)
                                 (make-vect 0.49 .85))
                   
                   ;; Shoulders
                   (make-segment (make-vect 0.41 0.76)
                                 (make-vect 0.34 0.76))
                   (make-segment (make-vect 0.58 0.76)
                                 (make-vect 0.72 0.76))

                   ;; Arms
                   (make-segment (make-vect 0.72 0.76)
                                 (make-vect 1.00 0.48))
                   (make-segment (make-vect 0.58 0.58)
                                 (make-vect 1.00 0.33))
                   (make-segment (make-vect 0.36 0.60)
                                 (make-vect 0.34 0.68))
                   (make-segment (make-vect 0.34 0.68)
                                 (make-vect 0.16 0.50))
                   (make-segment (make-vect 0.16 0.50)
                                 (make-vect 0.00 0.72))
                   (make-segment (make-vect 0.16 0.68)
                                 (make-vect 0.00 0.88))
                   (make-segment (make-vect 0.16 0.68)
                                 (make-vect 0.34 0.76))

                   ;; Legs
                   (make-segment (make-vect 0.58 0.58)
                                 (make-vect 0.75 0.00))
                   (make-segment (make-vect 0.50 0.42)
                                 (make-vect 0.60 0.00))
                   (make-segment (make-vect 0.50 0.42)
                                 (make-vect 0.40 0.00))
                   (make-segment (make-vect 0.36 0.60)
                                 (make-vect 0.25 0.00)))))
   frame))
#+END_SRC

#+CAPTION: smile
#+NAME: smile
[[images/wave-with-smile.png]]

b. 
 
#+BEGIN_SRC scheme
(define (new-corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left up)
              (bottom-right right)
              (corner (corner-split painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))
#+END_SRC

#+CAPTION: new corner split
#+NAME: new corner split
[[images/new-corner-split.png]]

c.

#+BEGIN_SRC scheme
(define (new-square-limit painter n)
  (let ((combine4 (square-of-four rotate-270 identity
                                  identity rotate-270)))
    (combine4 (corner-split painter n))))
#+END_SRC

#+CAPTION: new square limit
#+NAME: new square limit 
[[images/new-square-limit.png]]

** 2.3 Symbolic Data
*** 2.3.1 Quotation
**** Exercise 2.53
#+BEGIN_SRC scheme
(list 'a 'b 'c) => (a b c)
(list (list 'george)) => ((george))
(cdr '((x1 x2) (y1 y2))) => ((y1 y2))
(cadr '((x1 x2) (y1 y2))) => (y1 y2)
(pair? (car '(a short list))) => #f
(memq 'red '((red shoes) (blue socks))) => #f
(memq 'red '(red shoes blue socks)) => (red shoes blue socks)
#+END_SRC

**** Exercise 2.54

#+BEGIN_SRC scheme
(define (new-equal? a b)
  (cond ((not (eq? (length a) (length b))) #f)
        ((or (null? a) (null? b)) #t)
        (else (and (eq? (car a)
                        (car b))
                   (new-equal? (cdr a)
                               (cdr b))))))
#+END_SRC
**** Exercise 2.55
A quote that is quoted is just the symbol for the single quote.  It
depends on the implementation of course.
*** 2.3.2 Example: Symbolic Differentiation
**** Exercise 2.56
This is just the ordinary power rule of differentiation familiar from
elementary calculus:

$$ \frac{d(u^n)}{dx} = nu^{n-1}\(left \frac{du}{dx} \right)$$

The functions needed to define exponentiation become: 

#+BEGIN_SRC scheme
(define (exponentiation? e)
  (and (pair? e) (eq? (car e) 'expt)))

(define (base e) (cadr e))

(define (exponent e) (caddr e))

(define (make-exponentiation b e)
  (list 'expt b e))
#+END_SRC

and deriv becomes:

#+BEGIN_SRC scheme
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (let ((b (base exp))
               (e (exponent exp)))
           (make-product e
                         (make-product
                          (make-exponentiation b (- e 1))
                          (deriv b var)))))
        (else
         (error "unknown expression type -- DERIV" exp))))
#+END_SRC

**** Exercise 2.57
multiplier and addend don't change for this one, however multiplicand
and augend become:

#+BEGIN_SRC scheme
(define (augend a)
  (if (null? (cdddr a))
      (caddr a)
      (cons '+ (cddr a))))

(define (multiplicand p)
  (if (null? (cdddr p))
      (caddr p)
      (cons '* (cddr p))))
#+END_SRC
**** Exercise 2.58
a) In order to provide infix support, we just have to change the
functions that describe addition and multiplication:

#+BEGIN_SRC scheme
(define (make-sum a1 a2) (list a1 '+ a2))

(define (make-product m1 m2) (list m1 '* m2))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))

(define (addend a) (car a))
(define (augend a) (caddr a))

(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
#+END_SRC

b) For this final step, we merely need to alter augend and
multiplicand and as long as the input is not malformed (order of
operations is preserved and such), our derivitive function should be
able to handle random infix functions.

#+BEGIN_SRC scheme
(define (augend a)
  (if (null? (cdddr a))
      (caddr a)
      (cddr a)))

(define (multiplicand p)
  (if (null? (cdddr p))
      (caddr p)
      (cddr p)))
#+END_SRC
*** 2.3.3 Example: Representing Sets
**** Exercise 2.59
For the union of two sets, we interchange the lower arguments of
intersection-set and test for null values individually.

#+BEGIN_SRC scheme
(define (union-set set1 set2)
  (cond ((null? set2) set1)
        ((null? set1) set2)
        ((element-of-set? (car set1) set2)
         (union-set (cdr set1) set2))
         (else (cons (car set1)
                     (union-set (cdr set1) set2)))))
#+END_SRC
**** Exercise 2.60

For the duplicate member representation, element-of? will remain the same, 
since all it really does is search the list until a match is found.

#+BEGIN_SRC scheme
(define (element-of? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of? x (cdr set)))))
#+END_SRC

Since duplicates are allowed, adjoin-set becomes much simpler.

#+BEGIN_SRC scheme
(define (adjoin-set x set) (cons x set))
#+END_SRC

Intersection will remain the same as well
#+BEGIN_SRC scheme
(define (intersection set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of? (car set1) set2)
         (cons (car set1)
               (intersection (cdr set1) set2)))
        (else (intersection (cdr set1) set2))))
#+END_SRC

As far as performance is concerned, adjoin-set's performace is reduced by removing the call
to element-of?.  However, depending on how many duplicates are present in the set, the performance
of element-of? and thus every operation that depends on it could be greatly impacted.

Applications that perhaps did a lot of set adjoins where not too many duplicate elements would
be included would work best, since element-of? wouldn't be called too often.  However, applications
that performed lookups more often would probably want to go with a normal non-duplicate implementation.

**** Exercise 2.61
